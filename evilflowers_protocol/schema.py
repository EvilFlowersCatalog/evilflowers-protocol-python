# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-05-20T15:06:15+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import AnyUrl, BaseModel, Field


class FeedKind(Enum):
    navigation = 'navigation'
    acquisition = 'acquisition'


class AppsApiSerializersFeedsFeedSerializerBase(BaseModel):
    id: UUID = Field(..., title='Id')
    catalog_id: UUID = Field(..., title='Catalog Id')
    parents: Optional[List[UUID]] = Field([], title='Parents')
    children: Optional[List[UUID]] = Field([], title='Children')
    creator_id: UUID = Field(..., title='Creator Id')
    title: str = Field(..., title='Title')
    kind: FeedKind
    url_name: str = Field(..., title='Url Name')
    url: Optional[str] = Field(None, title='Url')
    content: str = Field(..., title='Content')
    per_page: Optional[int] = Field(None, title='Per Page')
    touched_at: datetime = Field(..., title='Touched At')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class AppsApiSerializersEntriesCategorySerializerDetailed(BaseModel):
    id: UUID = Field(..., title='Id')
    term: str = Field(..., title='Term')
    catalog_id: UUID = Field(..., title='Catalog Id')
    label: str = Field(..., title='Label')
    scheme: str = Field(..., title='Scheme')


class AppsApiSerializersEntriesAuthorSerializerDetailed(BaseModel):
    id: UUID = Field(..., title='Id')
    name: str = Field(..., title='Name')
    surname: str = Field(..., title='Surname')
    catalog_id: UUID = Field(..., title='Catalog Id')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class AppsApiSerializersTokensTokenSerializerRefresh(BaseModel):
    access_token: str = Field(..., title='Access Token')


class AcquisitionMIME(Enum):
    application_pdf = 'application/pdf'
    application_epub_zip = 'application/epub+zip'
    application_x_mobipocket_ebook = 'application/x-mobipocket-ebook'
    application_webpub_zip = 'application/webpub+zip'


class AcquisitionType(Enum):
    acquisition = 'acquisition'
    open_access = 'open-access'


class AppsApiSerializersEntriesAcquisitionSerializerNested(BaseModel):
    relation: AcquisitionType
    mime: AcquisitionMIME
    url: Optional[str] = Field(None, title='Url')


class AppsCoreErrorsValidationErrorItem(BaseModel):
    code: Optional[str] = Field(None, title='Code')
    message: str = Field(..., title='Message')
    path: Optional[List[str]] = Field(None, title='Path')


class Minimal(BaseModel):
    id: UUID = Field(..., title='Id')
    username: str = Field(..., title='Username')
    name: str = Field(..., title='Name')
    surname: str = Field(..., title='Surname')


class UserCatalog(BaseModel):
    mode: str = Field(..., title='Mode')
    user: Minimal


class AppsApiSerializersCatalogsCatalogSerializerDetailed(BaseModel):
    id: UUID = Field(..., title='Id')
    creator_id: UUID = Field(..., title='Creator Id')
    url_name: str = Field(..., title='Url Name')
    title: str = Field(..., title='Title')
    is_public: bool = Field(..., title='Is Public')
    touched_at: datetime = Field(..., title='Touched At')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')
    user_catalogs: Optional[List[UserCatalog]] = Field([], title='User Catalogs')


class AppsApiSerializersEntriesAcquisitionSerializerBase(BaseModel):
    relation: AcquisitionType
    mime: AcquisitionMIME
    url: Optional[str] = Field(None, title='Url')
    id: UUID = Field(..., title='Id')


class AppsApiSerializersEntriesAuthorSerializerBase(BaseModel):
    id: UUID = Field(..., title='Id')
    name: str = Field(..., title='Name')
    surname: str = Field(..., title='Surname')


class Mode(Enum):
    read = 'read'
    write = 'write'
    manage = 'manage'


class AppsApiSerializersUsersUserSerializerDetailed(BaseModel):
    id: UUID = Field(..., title='Id')
    username: str = Field(..., title='Username')
    name: str = Field(..., title='Name')
    surname: str = Field(..., title='Surname')
    is_superuser: bool = Field(..., title='Is Superuser')
    is_active: bool = Field(..., title='Is Active')
    last_login: datetime = Field(..., title='Last Login')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')
    permissions: List[str] = Field(..., title='Permissions')
    catalog_permissions: Optional[Dict[str, Mode]] = Field(
        None, title='Catalog Permissions'
    )


class AppsApiSerializersStatusStatusStatistics(BaseModel):
    catalogs: int = Field(..., title='Catalogs')
    entries: int = Field(..., title='Entries')
    acquisitions: int = Field(..., title='Acquisitions')
    users: int = Field(..., title='Users')


class AppsApiResponsePaginationModel(BaseModel):
    page: int = Field(..., title='Page')
    limit: int = Field(..., title='Limit')
    pages: int = Field(..., title='Pages')
    total: int = Field(..., title='Total')


class AppsApiSerializersEntriesCategorySerializerBase(BaseModel):
    id: UUID = Field(..., title='Id')
    term: str = Field(..., title='Term')


class PaginationModel(AppsApiResponsePaginationModel):
    pass


class RootModelTypeVar(BaseModel):
    __root__: Any = Field(..., title='RootModel[TypeVar]')


class AppsApiResponsePaginationResponseModel(BaseModel):
    items: RootModelTypeVar
    metadata: PaginationModel


class AppsApiSerializersApiKeysApiKeySerializerBase(BaseModel):
    id: UUID = Field(..., title='Id')
    user_id: UUID = Field(..., title='User Id')
    name: str = Field(..., title='Name')
    is_active: bool = Field(..., title='Is Active')
    last_seen_at: datetime = Field(..., title='Last Seen At')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class LicenseState(Enum):
    draft = 'draft'
    active = 'active'
    returned = 'returned'
    expired = 'expired'
    revoked = 'revoked'
    cancelled = 'cancelled'


class AppsReadiumSerializersLicenseSerializerBase(BaseModel):
    id: UUID = Field(..., title='Id')
    entry_id: UUID = Field(..., title='Entry Id')
    user_id: UUID = Field(..., title='User Id')
    state: LicenseState
    starts_at: datetime = Field(..., title='Starts At')
    expires_at: datetime = Field(..., title='Expires At')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class DetailType(Enum):
    field_out_of_range = '/out-of-range'
    field_not_found = '/not-found'
    field_validation_error = '/validation-error'
    field_conflict = '/conflict'


class AppsCoreErrorsProblemDetail(BaseModel):
    title: str = Field(..., title='Title')
    type: Optional[DetailType] = None
    detail: Optional[str] = Field(None, title='Detail')
    trace: Optional[List[str]] = Field(None, title='Trace')
    additional_data: Optional[Any] = Field(None, title='Additional Data')


class AppsApiSerializersUsersUserSerializerMinimal(Minimal):
    pass


class AppsApiSerializersUsersUserSerializerBase(BaseModel):
    id: UUID = Field(..., title='Id')
    username: str = Field(..., title='Username')
    name: str = Field(..., title='Name')
    surname: str = Field(..., title='Surname')
    is_superuser: bool = Field(..., title='Is Superuser')
    is_active: bool = Field(..., title='Is Active')
    last_login: datetime = Field(..., title='Last Login')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class Detailed(AppsApiSerializersUsersUserSerializerDetailed):
    pass


class AppsApiSerializersTokensTokenSerializerAccess(BaseModel):
    access_token: str = Field(..., title='Access Token')
    refresh_token: str = Field(..., title='Refresh Token')
    user: Detailed


class ValidationErrorItem(AppsCoreErrorsValidationErrorItem):
    pass


class AppsCoreErrorsValidationError(BaseModel):
    title: str = Field(..., title='Title')
    type: Optional[DetailType] = None
    detail: Optional[str] = Field(None, title='Detail')
    trace: Optional[List[str]] = Field(None, title='Trace')
    additional_data: Optional[Any] = Field(None, title='Additional Data')
    validation_errors: List[ValidationErrorItem] = Field(..., title='Validation Errors')


class AppsApiSerializersEntriesAcquisitionSerializerDetailed(BaseModel):
    relation: AcquisitionType
    mime: AcquisitionMIME
    url: Optional[str] = Field(None, title='Url')
    id: UUID = Field(..., title='Id')
    base64: str = Field(..., title='Base64')
    checksum: str = Field(..., title='Checksum')


class Nested(AppsApiSerializersEntriesAcquisitionSerializerNested):
    pass


class UserAcquisitionType(Enum):
    shared = 'shared'
    personal = 'personal'


class AppsApiResponseSingleResponseModel(BaseModel):
    response: Any = Field(..., title='Response')


class AppsApiSerializersCatalogsUserCatalog(UserCatalog):
    pass


class AppsApiSerializersCatalogsCatalogSerializerBase(BaseModel):
    id: UUID = Field(..., title='Id')
    creator_id: UUID = Field(..., title='Creator Id')
    url_name: str = Field(..., title='Url Name')
    title: str = Field(..., title='Title')
    is_public: bool = Field(..., title='Is Public')
    touched_at: datetime = Field(..., title='Touched At')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class AppsApiSerializersAnnotationAnnotationSerializerBase(BaseModel):
    id: UUID = Field(..., title='Id')
    user_acquisition_id: UUID = Field(..., title='User Acquisition Id')
    title: str = Field(..., title='Title')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class AppsApiSerializersAnnotationAnnotationItemSerializerBase(BaseModel):
    id: UUID = Field(..., title='Id')
    annotation_id: UUID = Field(..., title='Annotation Id')
    page: int = Field(..., title='Page')
    content: str = Field(..., title='Content')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class AppsApiSerializersEntriesLanguageSerializerBase(BaseModel):
    id: UUID = Field(..., title='Id')
    name: str = Field(..., title='Name')
    alpha2: str = Field(..., title='Alpha2')
    alpha3: str = Field(..., title='Alpha3')


class StatusStatistics(AppsApiSerializersStatusStatusStatistics):
    pass


class AppsApiSerializersStatusStatusSerializer(BaseModel):
    timestamp: datetime = Field(..., title='Timestamp')
    instance: str = Field(..., title='Instance')
    stats: StatusStatistics
    build: Optional[str] = Field(None, title='Build')
    version: Optional[str] = Field(None, title='Version')
    python: Optional[str] = Field(None, title='Python')
    supervisord: Optional[Dict[str, str]] = Field(None, title='Supervisord')


class AppsApiSerializersEntriesEntrySerializerDetailed(BaseModel):
    id: UUID = Field(..., title='Id')
    creator_id: UUID = Field(..., title='Creator Id')
    catalog_id: UUID = Field(..., title='Catalog Id')
    shelf_record_id: Optional[UUID] = Field(None, title='Shelf Record Id')
    entry_authors: Optional[List[AppsApiSerializersEntriesAuthorSerializerBase]] = (
        Field(None, title='Entry Authors')
    )
    categories: Optional[List[AppsApiSerializersEntriesCategorySerializerBase]] = Field(
        None, title='Categories'
    )
    language: AppsApiSerializersEntriesLanguageSerializerBase
    feeds: Optional[List[AppsApiSerializersFeedsFeedSerializerBase]] = Field(
        None, title='Feeds'
    )
    acquisitions: Optional[List[AppsApiSerializersEntriesAcquisitionSerializerBase]] = (
        Field(None, title='Acquisitions')
    )
    popularity: int = Field(..., title='Popularity')
    title: str = Field(..., title='Title')
    summary: str = Field(..., title='Summary')
    image_url: Optional[str] = Field(None, title='Image Url')
    image_mime: str = Field(..., title='Image Mime')
    thumbnail_url: Optional[str] = Field(None, title='Thumbnail Url')
    config: Dict[str, Any] = Field(..., title='Config')
    citation: str = Field(..., title='Citation')
    touched_at: datetime = Field(..., title='Touched At')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')
    published_at: str = Field(..., title='Published At')
    publisher: str = Field(..., title='Publisher')
    content: str = Field(..., title='Content')
    identifiers: Dict[str, Any] = Field(..., title='Identifiers')


class UserAcquisitionForm(BaseModel):
    acquisition_id: str = Field(..., description='', title='acquisition_id')
    type: UserAcquisitionType = Field(..., description='', title='type')
    range: Optional[str] = Field(None, description='', title='range')
    expire_at: Optional[datetime] = Field(None, description='', title='expire_at')


class RefreshTokenForm(BaseModel):
    refresh: str = Field(..., description='', title='refresh')


class AnnotationItemForm(BaseModel):
    annotation_id: str = Field(..., description='', title='annotation_id')
    content: str = Field(..., description='', title='content')
    page: int = Field(..., description='', title='page')


class UpdateLicenseForm(BaseModel):
    state: LicenseState = Field(..., description='', title='state')
    duration: str = Field(
        ...,
        description='Duration in ISO 8601 format. Example: "PT1H30M" for 1 hour and 30 minutes.\nThe format is defined as follows:\n- "P" indicates the period.\n- "Y" for years, "M" for months, "D" for days.\n- "T" indicates the start of the time section.\n- "H" for hours, "M" for minutes, "S" for seconds.\n- Valid examples include:\n  - "PT30M" (30 minutes)\n  - "P1Y2M10DT5H30M" (1 year, 2 months, 10 days, 5 hours, and 30 minutes)',
        example='P14D',
        regex='^P(?!P)(?:(\\d+Y)?(\\d+M)?(\\d+D)?(T(?:(\\d+H)?(\\d+M)?(\\d+S)?))?)?$',
        title='duration',
    )


class FeedForm(BaseModel):
    catalog_id: str = Field(..., description='', title='catalog_id')
    title: str = Field(..., description='', max_length=100, title='title')
    url_name: str = Field(..., description='', max_length=50, title='url_name')
    kind: FeedKind = Field(..., description='', title='kind')
    content: str = Field(..., description='', title='content')
    per_page: Optional[int] = Field(None, description='', ge=1, title='per_page')
    entries: Optional[str] = Field(None, description='', title='entries')
    parents: Optional[str] = Field(None, description='', title='parents')


class AuthorForm(BaseModel):
    name: str = Field(..., description='', max_length=255, title='name')
    surname: str = Field(..., description='', max_length=255, title='surname')


class UpdateAnnotationForm(BaseModel):
    title: str = Field(..., description='', title='title')


class UserForm(BaseModel):
    name: str = Field(..., description='', max_length=30, title='name')
    surname: str = Field(..., description='', max_length=150, title='surname')
    password: Optional[str] = Field(None, description='', title='password')
    is_active: Optional[bool] = Field(None, description='', title='is_active')


class CreateAnnotationForm(BaseModel):
    user_acquisition_id: str = Field(..., description='', title='user_acquisition_id')
    title: str = Field(..., description='', title='title')


class ShelfRecordForm(BaseModel):
    entry_id: str = Field(..., description='', title='entry_id')


class PriceForm(BaseModel):
    currency_code: str = Field(..., description='', title='currency_code')
    value: int = Field(..., description='', title='value')


class CategoryForm(BaseModel):
    catalog_id: Optional[str] = Field(None, description='', title='catalog_id')
    term: str = Field(..., description='', max_length=255, title='term')
    label: Optional[str] = Field(None, description='', max_length=255, title='label')
    scheme: Optional[str] = Field(None, description='', max_length=255, title='scheme')


class CreateAuthorForm(BaseModel):
    name: str = Field(..., description='', max_length=255, title='name')
    surname: str = Field(..., description='', max_length=255, title='surname')
    catalog_id: str = Field(..., description='', title='catalog_id')


class AccessTokenForm(BaseModel):
    username: str = Field(..., description='', max_length=200, title='username')
    password: str = Field(..., description='', title='password')


class CreateUserForm(BaseModel):
    name: str = Field(..., description='', max_length=30, title='name')
    surname: str = Field(..., description='', max_length=150, title='surname')
    password: str = Field(..., description='', title='password')
    is_active: Optional[bool] = Field(None, description='', title='is_active')
    username: str = Field(..., description='', max_length=200, title='username')


class CreateLicenseForm(BaseModel):
    entry_id: str = Field(..., description='', title='entry_id')
    state: LicenseState = Field(..., description='', title='state')
    duration: str = Field(
        ...,
        description='Duration in ISO 8601 format. Example: "PT1H30M" for 1 hour and 30 minutes.\nThe format is defined as follows:\n- "P" indicates the period.\n- "Y" for years, "M" for months, "D" for days.\n- "T" indicates the start of the time section.\n- "H" for hours, "M" for minutes, "S" for seconds.\n- Valid examples include:\n  - "PT30M" (30 minutes)\n  - "P1Y2M10DT5H30M" (1 year, 2 months, 10 days, 5 hours, and 30 minutes)',
        example='P14D',
        regex='^P(?!P)(?:(\\d+Y)?(\\d+M)?(\\d+D)?(T(?:(\\d+H)?(\\d+M)?(\\d+S)?))?)?$',
        title='duration',
    )
    starts_at: Optional[datetime] = Field(None, description='', title='starts_at')


class EvilflowersRenderType(Enum):
    document = 'document'
    page = 'page'


class EntryConfigForm(BaseModel):
    evilflowers_ocr_enabled: Optional[bool] = Field(
        None, description='', title='evilflowers_ocr_enabled'
    )
    evilflowers_ocr_rewrite: Optional[bool] = Field(
        None, description='', title='evilflowers_ocr_rewrite'
    )
    evilflowers_annotations_create: Optional[bool] = Field(
        None, description='', title='evilflowers_annotations_create'
    )
    evilflowers_viewer_print: Optional[bool] = Field(
        None, description='', title='evilflowers_viewer_print'
    )
    evilflowers_share_enabled: Optional[bool] = Field(
        None, description='', title='evilflowers_share_enabled'
    )
    evilflowres_metadata_fetch: Optional[bool] = Field(
        None, description='', title='evilflowres_metadata_fetch'
    )
    readium_enabled: Optional[bool] = Field(
        None, description='', title='readium_enabled'
    )
    evilflowers_render_type: Optional[EvilflowersRenderType] = Field(
        None, description='', title='evilflowers_render_type'
    )


class AcquisitionForm(BaseModel):
    relation: Optional[AcquisitionType] = Field(None, description='', title='relation')
    prices: Optional[List[PriceForm]] = Field(None, description='', title='prices')
    content: AnyUrl = Field(..., description='', title='content')


class ApiKeyForm(BaseModel):
    user_id: Optional[str] = Field(None, description='', title='user_id')
    name: Optional[str] = Field(None, description='', max_length=100, title='name')
    is_active: Optional[bool] = Field(None, description='', title='is_active')


class UserCatalogForm(BaseModel):
    user_id: str = Field(..., description='', title='user_id')
    mode: Mode = Field(..., description='', title='mode')


class AppsApiSerializersEntriesEntrySerializerBase(BaseModel):
    id: UUID = Field(..., title='Id')
    creator_id: UUID = Field(..., title='Creator Id')
    catalog_id: UUID = Field(..., title='Catalog Id')
    shelf_record_id: Optional[UUID] = Field(None, title='Shelf Record Id')
    entry_authors: Optional[List[AppsApiSerializersEntriesAuthorSerializerBase]] = (
        Field(None, title='Entry Authors')
    )
    categories: Optional[List[AppsApiSerializersEntriesCategorySerializerBase]] = Field(
        None, title='Categories'
    )
    language: AppsApiSerializersEntriesLanguageSerializerBase
    feeds: Optional[List[AppsApiSerializersFeedsFeedSerializerBase]] = Field(
        None, title='Feeds'
    )
    acquisitions: Optional[List[AppsApiSerializersEntriesAcquisitionSerializerBase]] = (
        Field(None, title='Acquisitions')
    )
    popularity: int = Field(..., title='Popularity')
    title: str = Field(..., title='Title')
    summary: str = Field(..., title='Summary')
    image_url: Optional[str] = Field(None, title='Image Url')
    image_mime: str = Field(..., title='Image Mime')
    thumbnail_url: Optional[str] = Field(None, title='Thumbnail Url')
    config: Dict[str, Any] = Field(..., title='Config')
    citation: str = Field(..., title='Citation')
    touched_at: datetime = Field(..., title='Touched At')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class AcquisitionMetaForm(BaseModel):
    relation: Optional[AcquisitionType] = Field(None, description='', title='relation')
    prices: Optional[List[PriceForm]] = Field(None, description='', title='prices')


class CatalogForm(BaseModel):
    url_name: str = Field(..., description='', title='url_name')
    title: str = Field(..., description='', max_length=100, title='title')
    is_public: Optional[bool] = Field(None, description='', title='is_public')
    users: Optional[List[UserCatalogForm]] = Field(None, description='', title='users')


class EntryForm(BaseModel):
    id: Optional[str] = Field(None, description='', title='id')
    language_code: str = Field(..., description='', max_length=3, title='language_code')
    category_ids: Optional[str] = Field(None, description='', title='category_ids')
    authors: Optional[List[AuthorForm]] = Field(None, description='', title='authors')
    author_ids: Optional[str] = Field(None, description='', title='author_ids')
    feeds: Optional[str] = Field(None, description='', title='feeds')
    categories: Optional[List[CategoryForm]] = Field(
        None, description='', title='categories'
    )
    title: str = Field(..., description='', max_length=255, title='title')
    publisher: Optional[str] = Field(
        None, description='', max_length=255, title='publisher'
    )
    published_at: Optional[str] = Field(None, description='', title='published_at')
    summary: Optional[str] = Field(None, description='', title='summary')
    content: Optional[str] = Field(None, description='', title='content')
    acquisitions: Optional[List[AcquisitionForm]] = Field(
        None, description='', title='acquisitions'
    )
    identifiers: Optional[str] = Field(None, description='', title='identifiers')
    image: Optional[AnyUrl] = Field(None, description='', title='image')
    config: Optional[EntryConfigForm] = Field(None, description='', title='config')
    citation: Optional[str] = Field(None, description='', title='citation')


class AppsApiSerializersUserAcquisitionsUserAcquisitionSerializerBase(BaseModel):
    id: UUID = Field(..., title='Id')
    type: UserAcquisitionType
    range: str = Field(..., title='Range')
    user: Minimal
    acquisition: Nested
    url: Optional[str] = Field(None, title='Url')
    entry: AppsApiSerializersEntriesEntrySerializerBase
    expire_at: datetime = Field(..., title='Expire At')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class AppsApiSerializersShelfRecordsShelfRecordSerializerBase(BaseModel):
    id: UUID = Field(..., title='Id')
    user_id: UUID = Field(..., title='User Id')
    entry: AppsApiSerializersEntriesEntrySerializerBase
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')
