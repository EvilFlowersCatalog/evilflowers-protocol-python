{
  "openapi": "3.0.0",
  "info": {
    "title": "EvilFlowers Catalog",
    "version": "0.13.0",
    "description": "A e-book catalog server compatible with [OPDS 1.2](https://specs.opds.io/opds-1.2), written in Python with a straightforward management REST API for CRUD operations.",
    "license": {
      "url": "https://github.com/EvilFlowersCatalog/EvilFlowersCatalog/blob/master/LICENSE",
      "name": "MIT"
    },
    "contact": {
      "name": "EvilFlowersCatalog",
      "url": "https://github.com/EvilFlowersCatalog/EvilFlowersCatalog",
      "email": "jakub.dubec@stuba.sk"
    }
  },
  "paths": {
    "/api/v1//api_keys": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "last_seen_at__gte",
            "in": "query",
            "description": "Filter by last_seen_at__gte (gte)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "last_seen_at__lte",
            "in": "query",
            "description": "Filter by last_seen_at__lte (lte)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/apps__api__response__PaginationModel"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/apps__api__serializers__api_keys__ApiKeySerializer__Base"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "ApiKeyManagement.get",
        "summary": "List API keys",
        "description": "Retrieve a paginated list of API keys in the system. Returns API key metadata including creation date, user association, and key status. Supports filtering and pagination. Superusers can view all keys, while regular users see only their own keys.",
        "tags": [
          "API Keys"
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Insufficient permissions')"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__api_keys__ApiKeySerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyForm"
              }
            }
          }
        },
        "operationId": "ApiKeyManagement.post",
        "summary": "Create new API key",
        "description": "Generate a new API key for the authenticated user. Creates a unique API key that can be used for programmatic access to the API. Superusers can create keys for other users by specifying a user_id. Returns the generated key details including the key value for initial setup.",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/api/v1//api_keys/{api_key_id}": {
      "parameters": [
        {
          "name": "api_key_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('ApiKey not found')"
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "ApiKeyDetail.delete",
        "summary": "Delete API key",
        "description": "Permanently delete an API key, immediately revoking its access to the API. Only the key owner or superusers can delete keys. Once deleted, the key cannot be recovered and any applications using it will lose access. Returns 404 if key doesn't exist or user lacks permission.",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/api/v1//users": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Filter by id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter by username (icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "surname",
            "in": "query",
            "description": "Filter by surname (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "Filter by is_active (exact)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "last_login_gte",
            "in": "query",
            "description": "Filter by last_login_gte (gte)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "last_login_lte",
            "in": "query",
            "description": "Filter by last_login_lte (lte)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/apps__api__response__PaginationModel"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/apps__api__serializers__users__UserSerializer__Base"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "UserManagement.get",
        "summary": "List system users",
        "description": "Retrieve a paginated list of users in the system. Supports filtering by username, name, surname, active status, and last login date. Requires appropriate permissions to access user information.",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Insufficient permissions')"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('User with same username already exists')"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__users__UserSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserForm"
              }
            }
          }
        },
        "operationId": "UserManagement.post",
        "summary": "Create a new user account",
        "description": "Create a new user account with authentication credentials and profile information. The user will be able to authenticate and access catalogs based on assigned permissions.",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1//users/me": {
      "parameters": [],
      "get": {
        "parameters": [],
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": ""
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__users__UserSerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "UserMe.get",
        "summary": "Get current user profile",
        "description": "Get detailed information about the currently authenticated user including profile data, permissions, and accessible catalogs. This endpoint allows users to view their own account information.",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1//users/{user_id}": {
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__users__UserSerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "UserDetail.get",
        "summary": "Get user details",
        "description": "Retrieve detailed information about a specific user, including their profile information, permissions, and catalog access. Requires appropriate permissions to view user details.",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__users__UserSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserForm"
              }
            }
          }
        },
        "operationId": "UserDetail.put",
        "summary": "Update user profile",
        "description": "Update user profile information including name, surname, email, and active status. Requires appropriate permissions to modify user accounts.",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "UserDetail.delete",
        "summary": "Delete user account",
        "description": "Permanently delete a user account and all associated data including annotations, shelf records, and access permissions. This action is irreversible and requires appropriate permissions.",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1//catalogs": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "Filter by title (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url_name",
            "in": "query",
            "description": "Filter by url_name (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/apps__api__response__PaginationModel"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/apps__api__serializers__catalogs__CatalogSerializer__Base"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "CatalogManagement.get",
        "summary": "List accessible catalogs",
        "description": "Retrieve a paginated list of catalogs accessible to the authenticated user. Supports filtering by title and URL name. Returns both public catalogs and private catalogs the user has access to.",
        "tags": [
          "Catalogs"
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Insufficient permissions')"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__catalogs__CatalogSerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogForm"
              }
            }
          }
        },
        "operationId": "CatalogManagement.post",
        "summary": "Create a new catalog",
        "description": "Create a new catalog to organize and manage publications. A catalog is a container for entries (books, articles, etc.) and can be configured with access permissions, visibility settings, and custom metadata.",
        "tags": [
          "Catalogs"
        ]
      }
    },
    "/api/v1//catalogs/{catalog_id}": {
      "parameters": [
        {
          "name": "catalog_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__catalogs__CatalogSerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "CatalogDetail.get",
        "summary": "Get catalog details",
        "description": "Retrieve detailed information about a specific catalog, including its metadata, statistics, and access permissions. This endpoint provides comprehensive information about the catalog's configuration and contents.",
        "tags": [
          "Catalogs"
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": ""
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__catalogs__CatalogSerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogForm"
              }
            }
          }
        },
        "operationId": "CatalogDetail.put",
        "summary": "Update catalog metadata",
        "description": "Update the metadata and configuration of an existing catalog. This includes title, description, visibility settings, and access permissions. Only users with manage permissions can update a catalog.",
        "tags": [
          "Catalogs"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "CatalogDetail.delete",
        "summary": "Delete catalog",
        "description": "Permanently delete a catalog and all its associated entries, acquisition files, and user data. This action is irreversible and requires appropriate permissions. All content within the catalog will be lost.",
        "tags": [
          "Catalogs"
        ]
      }
    },
    "/api/v1//feeds": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "name": "creator_id",
            "in": "query",
            "description": "Filter by creator_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "catalog_id",
            "in": "query",
            "description": "Filter by catalog_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Filter by title (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "kind",
            "in": "query",
            "description": "Filter by kind (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "navigation",
                "acquisition"
              ]
            }
          },
          {
            "name": "parent_id",
            "in": "query",
            "description": "Filter by parent_id (exact)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/apps__api__response__PaginationModel"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/apps__api__serializers__feeds__FeedSerializer__Base"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "FeedManagement.get",
        "summary": "List feeds with filtering",
        "description": "Retrieve a paginated list of feeds with filtering options. Supports filtering by creator, catalog, title, kind (navigation/acquisition), and parent feed relationships.",
        "tags": [
          "Feeds"
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Insufficient permissions')"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Feed with same url_name already exists in same catalog')"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__feeds__FeedSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedForm"
              }
            }
          }
        },
        "operationId": "FeedManagement.post",
        "summary": "Create a new feed",
        "description": "Create a new feed to organize and categorize entries within a catalog. Feeds can be used to group related publications, create reading lists, or organize content by topic, genre, or any custom criteria.",
        "tags": [
          "Feeds"
        ]
      }
    },
    "/api/v1//feeds/{feed_id}": {
      "parameters": [
        {
          "name": "feed_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__feeds__FeedSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "FeedDetail.get",
        "summary": "Get feed details",
        "description": "Retrieve detailed information about a specific feed including its metadata, content, associated entries, and hierarchical relationships with parent and child feeds.",
        "tags": [
          "Feeds"
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Feed with same url_name already exists in same catalog')"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__feeds__FeedSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedForm"
              }
            }
          }
        },
        "operationId": "FeedDetail.put",
        "summary": "Update feed metadata",
        "description": "Update feed metadata including title, content, associated entries, and feed relationships. Allows modification of feed organization and content curation.",
        "tags": [
          "Feeds"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "FeedDetail.delete",
        "summary": "Delete feed",
        "description": "Permanently delete a feed and remove its organizational structure. This does not delete the entries within the feed, only the feed container itself. This action is irreversible.",
        "tags": [
          "Feeds"
        ]
      }
    },
    "/api/v1//authors": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "name": "catalog_id",
            "in": "query",
            "description": "Filter by catalog_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "surname",
            "in": "query",
            "description": "Filter by surname (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Filter by query (exact)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/apps__api__response__PaginationModel"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/apps__api__serializers__entries__AuthorSerializer__Detailed"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "AuthorManagement.get",
        "summary": "List all authors",
        "description": "Retrieve a paginated list of authors across all catalogs. Returns detailed author information including name, surname, and catalog associations. Supports filtering by various author attributes and provides comprehensive author metadata for content management.",
        "tags": [
          "Authors"
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Insufficient permissions')"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Author already exists in the catalog')"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__entries__AuthorSerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAuthorForm"
              }
            }
          }
        },
        "operationId": "AuthorManagement.post",
        "summary": "Create new author",
        "description": "Create a new author record in a specific catalog. Requires catalog write permissions and validates that the author name/surname combination is unique within the target catalog. Returns the created author with detailed information including catalog association.",
        "tags": [
          "Authors"
        ]
      }
    },
    "/api/v1//authors/{author_id}": {
      "parameters": [
        {
          "name": "author_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__entries__AuthorSerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "AuthorDetail.get",
        "summary": "Get author details",
        "description": "Retrieve detailed information about a specific author. Returns comprehensive author data including name, surname, catalog information, and associated metadata. Requires catalog read permissions for the author's catalog.",
        "tags": [
          "Authors"
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Author already exists in the catalog')"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__entries__AuthorSerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAuthorForm"
              }
            }
          }
        },
        "operationId": "AuthorDetail.put",
        "summary": "Update author information",
        "description": "Update an existing author's information. Allows modification of author name, surname, and catalog association. Validates uniqueness constraints and requires catalog manage permissions. Returns the updated author with all current information.",
        "tags": [
          "Authors"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "AuthorDetail.delete",
        "summary": "Delete author",
        "description": "Permanently delete an author from the catalog. Requires catalog manage permissions and will remove all associations with entries. This action cannot be undone and may affect content that references this author.",
        "tags": [
          "Authors"
        ]
      }
    },
    "/api/v1//categories": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "name": "catalog_id",
            "in": "query",
            "description": "Filter by catalog_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "term",
            "in": "query",
            "description": "Filter by term (unaccent, iexact)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "Filter by label (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scheme",
            "in": "query",
            "description": "Filter by scheme (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Filter by query (exact)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/apps__api__response__PaginationModel"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/apps__api__serializers__entries__CategorySerializer__Detailed"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "CategoryManagement.get",
        "summary": "List all categories",
        "description": "Retrieve a paginated list of categories across all catalogs. Returns detailed category information including terms, descriptions, and catalog associations. Supports filtering by various category attributes to help manage content organization.",
        "tags": [
          "Categories"
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Insufficient permissions')"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__entries__CategorySerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryForm"
              }
            }
          }
        },
        "operationId": "CategoryManagement.post",
        "summary": "Create new category",
        "description": "Create a new category within a specific catalog. Requires catalog manage permissions and validates that the category term is unique within the system. Categories help organize and classify catalog entries for better content discovery and management.",
        "tags": [
          "Categories"
        ]
      }
    },
    "/api/v1//categories/{category_id}": {
      "parameters": [
        {
          "name": "category_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__entries__CategorySerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "CategoryDetail.get",
        "summary": "Get category details",
        "description": "Retrieve detailed information about a specific category. Returns comprehensive category data including term, description, catalog association, and metadata. Requires catalog read permissions for the category's catalog.",
        "tags": [
          "Categories"
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Insufficient permissions')"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": ""
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__entries__CategorySerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryForm"
              }
            }
          }
        },
        "operationId": "CategoryDetail.put",
        "summary": "Update category information",
        "description": "Update an existing category's information. Allows modification of category term, description, and catalog association. Validates uniqueness constraints and requires catalog manage permissions. Returns the updated category with all current information.",
        "tags": [
          "Categories"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "CategoryDetail.delete",
        "summary": "Delete category",
        "description": "Permanently delete a category from the catalog. Requires catalog manage permissions and will remove all associations with entries. This action cannot be undone and may affect content organization that references this category.",
        "tags": [
          "Categories"
        ]
      }
    },
    "/api/v1//entries": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "name": "creator_id",
            "in": "query",
            "description": "Filter by creator_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "catalog_id",
            "in": "query",
            "description": "Filter by catalog_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "catalog_title",
            "in": "query",
            "description": "Filter by catalog_title (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "author_id",
            "in": "query",
            "description": "Filter by author_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Filter by author (exact)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Filter by category_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "category_term",
            "in": "query",
            "description": "Filter by category_term (exact)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language_id",
            "in": "query",
            "description": "Filter by language_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "language_code",
            "in": "query",
            "description": "Filter by language_code (exact)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Filter by title (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "summary",
            "in": "query",
            "description": "Filter by summary (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Filter by query (exact)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feed_id",
            "in": "query",
            "description": "Filter by feed_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "published_at__gte",
            "in": "query",
            "description": "Filter by published_at__gte (exact)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "published_at__lte",
            "in": "query",
            "description": "Filter by published_at__lte (exact)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "config__readium_enabled",
            "in": "query",
            "description": "Filter by config__readium_enabled (exact)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/apps__api__response__PaginationModel"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/apps__api__serializers__entries__EntrySerializer__Base"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "EntryPaginator.get",
        "summary": "List catalog entries with filtering and pagination",
        "description": "Retrieve a paginated list of entries from the catalog. Supports advanced filtering by catalog, author, category, language, publication date, and full-text search across titles, summaries, and content.",
        "tags": [
          "Entries"
        ]
      }
    },
    "/api/v1//entry-introspection": {
      "parameters": [],
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "EntryIntrospection.get",
        "summary": "Fetch entry metadata from external sources",
        "description": "Fetch metadata for a publication from external sources using various identifiers (ISBN, DOI, etc.). This endpoint allows you to retrieve detailed information about a book or publication before creating an entry in the catalog.",
        "tags": [
          "Entries"
        ]
      }
    },
    "/api/v1//catalogs/{catalog_id}/entries": {
      "parameters": [
        {
          "name": "catalog_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "post": {
        "parameters": [],
        "responses": {
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Catalog not found')"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Insufficient permissions')"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "'Entry already exists!'"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__entries__EntrySerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntryForm"
              }
            }
          }
        },
        "operationId": "EntryManagement.post",
        "summary": "Create a new catalog entry",
        "description": "Create a new entry in the specified catalog. An entry represents a publication (book, article, etc.) with metadata like title, authors, publication date, and associated acquisition files.",
        "tags": [
          "Entries"
        ]
      }
    },
    "/api/v1//catalogs/{catalog_id}/entries/{entry_id}": {
      "parameters": [
        {
          "name": "catalog_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        },
        {
          "name": "entry_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__entries__EntrySerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "EntryDetail.get",
        "summary": "Get entry details",
        "description": "Retrieve detailed information about a specific entry including its metadata, authors, categories, acquisition files, and user-specific information like shelf status.",
        "tags": [
          "Entries"
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": ""
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__entries__AcquisitionSerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcquisitionMetaForm"
              }
            }
          }
        },
        "operationId": "EntryDetail.post",
        "summary": "Create acquisition file for entry",
        "description": "Create a new acquisition file for the specified entry. Acquisitions represent downloadable content (PDF, EPUB, etc.) associated with an entry, including file metadata and optional pricing information.",
        "tags": [
          "Entries"
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "'Entry already exists!'"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__entries__EntrySerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntryForm"
              }
            }
          }
        },
        "operationId": "EntryDetail.put",
        "summary": "Update entry metadata",
        "description": "Update the metadata of an existing entry. This includes title, summary, authors, categories, publication information, and configuration settings for features like OCR and annotations.",
        "tags": [
          "Entries"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "EntryDetail.delete",
        "summary": "Delete catalog entry",
        "description": "Remove an entry from the catalog. This will also delete all associated acquisition files and user data (annotations, shelf records). This action is irreversible.",
        "tags": [
          "Entries"
        ]
      }
    },
    "/api/v1//acquisitions": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "name": "entry_id",
            "in": "query",
            "description": "Filter by entry_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "relation",
            "in": "query",
            "description": "Filter by relation (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "acquisition",
                "open-access",
                "borrow"
              ]
            }
          },
          {
            "name": "mime",
            "in": "query",
            "description": "Filter by mime (exact)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/apps__api__response__PaginationModel"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/apps__api__serializers__entries__AcquisitionSerializer__Base"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "AcquisitionManagement.get",
        "summary": "List acquisition files",
        "description": "Retrieve a paginated list of acquisition files with filtering options. Supports filtering by entry, file type, media type, and availability status. Acquisitions represent downloadable content associated with catalog entries.",
        "tags": [
          "Acquisitions"
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "501": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Not implemented')"
          }
        },
        "operationId": "AcquisitionManagement.post",
        "summary": "Create acquisition file",
        "description": "Create a new acquisition file for an entry. Acquisitions represent downloadable content (PDF, EPUB, etc.) with associated metadata, pricing information, and access controls. Note: This endpoint is currently not implemented.",
        "tags": [
          "Acquisitions"
        ]
      }
    },
    "/api/v1//acquisitions/{acquisition_id}": {
      "parameters": [
        {
          "name": "acquisition_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__entries__AcquisitionSerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "AcquisitionDetail.get",
        "summary": "Get acquisition details",
        "description": "Retrieve detailed information about a specific acquisition file including its metadata, file properties, pricing information, and download availability.",
        "tags": [
          "Acquisitions"
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__entries__AcquisitionSerializer__Detailed"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcquisitionMetaForm"
              }
            }
          }
        },
        "operationId": "AcquisitionDetail.put",
        "summary": "Update acquisition metadata",
        "description": "Update acquisition metadata including type, relation, pricing information, and availability settings. The actual file content is immutable - only metadata can be modified through the API. This allows for price updates, availability changes, and metadata corrections.",
        "tags": [
          "Acquisitions"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "AcquisitionDetail.delete",
        "summary": "Delete acquisition file",
        "description": "Remove an acquisition file from the catalog. This deletes the database record immediately, while the actual file removal occurs later during the orphaned files cleanup process. This action is irreversible.",
        "tags": [
          "Acquisitions"
        ]
      }
    },
    "/api/v1//shelf-records": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "name": "catalog_id",
            "in": "query",
            "description": "Filter by catalog_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "catalog_title",
            "in": "query",
            "description": "Filter by catalog_title (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entry_id",
            "in": "query",
            "description": "Filter by entry_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "author_id",
            "in": "query",
            "description": "Filter by author_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Filter by author (exact)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Filter by category_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "category_term",
            "in": "query",
            "description": "Filter by category_term (exact)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language_id",
            "in": "query",
            "description": "Filter by language_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "language_code",
            "in": "query",
            "description": "Filter by language_code (exact)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Filter by title (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "summary",
            "in": "query",
            "description": "Filter by summary (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Filter by query (exact)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feed_id",
            "in": "query",
            "description": "Filter by feed_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": ""
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/apps__api__response__PaginationModel"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/apps__api__serializers__shelf_records__ShelfRecordSerializer__Base"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "ShelfRecordManagement.get",
        "summary": "List user's shelf records",
        "description": "Retrieve a paginated list of shelf records for the authenticated user. Returns all books, entries, and catalog items that the user has added to their personal shelf. Requires authentication and filters results to only show the current user's shelf items.",
        "tags": [
          "Shelf Records"
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": ""
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__shelf_records__ShelfRecordSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__shelf_records__ShelfRecordSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShelfRecordForm"
              }
            }
          }
        },
        "operationId": "ShelfRecordManagement.post",
        "summary": "Add entry to user's shelf",
        "description": "Add a new entry to the user's shelf. Creates a shelf record linking the authenticated user to a specific catalog entry. If the entry is already on the user's shelf, returns the existing record with HTTP 200 status. Requires authentication and valid entry ID.",
        "tags": [
          "Shelf Records"
        ]
      }
    },
    "/api/v1//shelf-records/{shelf_record_id}": {
      "parameters": [
        {
          "name": "shelf_record_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "delete": {
        "parameters": [],
        "responses": {
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "ShelfRecordDetail.delete",
        "summary": "Remove entry from user's shelf",
        "description": "Remove a specific entry from the user's shelf. Permanently deletes the shelf record identified by the provided UUID. Only the shelf record owner can delete their own records. Returns 404 if the record doesn't exist or the user lacks permission.",
        "tags": [
          "Shelf Records"
        ]
      }
    },
    "/api/v1//user-acquisitions": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "acquisition_id",
            "in": "query",
            "description": "Filter by acquisition_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by type (iexact)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Filter by title (unaccent, icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expire_at__gte",
            "in": "query",
            "description": "Filter by expire_at__gte (gte)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "expire_at__lte",
            "in": "query",
            "description": "Filter by expire_at__lte (lte)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_at__gte",
            "in": "query",
            "description": "Filter by created_at__gte (gte)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_at__lte",
            "in": "query",
            "description": "Filter by created_at__lte (lte)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/apps__api__response__PaginationModel"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/apps__api__serializers__user_acquisitions__UserAcquisitionSerializer__Base"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "UserAcquisitionManagement.get",
        "summary": "List all user acquisitions",
        "description": "Retrieve a paginated list of user acquisitions across the system. Returns acquisition records that represent user access to specific catalog entries. Supports filtering and pagination to manage large result sets. Includes acquisition details, user information, and associated entry metadata.",
        "tags": [
          "User Acquisitions"
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Insufficient permissions')"
          },
          "303": {
            "description": "See Other",
            "headers": {
              "Location": {
                "description": "The URL to which the client should be redirected",
                "schema": {
                  "type": "string",
                  "format": "url"
                }
              }
            }
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__user_acquisitions__UserAcquisitionSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAcquisitionForm"
              }
            }
          }
        },
        "operationId": "UserAcquisitionManagement.post",
        "summary": "Create new user acquisition",
        "description": "Create a new user acquisition record, granting a user access to a specific catalog entry. Supports both personal and shared acquisition types. Validates user permissions for the target entry and handles single acquisition mode restrictions. Returns existing acquisition with redirect if already exists in single mode.",
        "tags": [
          "User Acquisitions"
        ]
      }
    },
    "/api/v1//user-acquisitions/{user_acquisition_id}": {
      "parameters": [
        {
          "name": "user_acquisition_id",
          "in": "path",
          "description": "UserAcquisition UUID",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('User acquisition not found')"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Insufficient permissions')"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__user_acquisitions__UserAcquisitionSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "UserAcquisitionDetail.get",
        "summary": "Get user acquisition details",
        "description": "Retrieve detailed information about a specific user acquisition record. Returns acquisition metadata, associated entry details, user information, and access permissions. Validates that the requesting user has permission to view the acquisition record.",
        "tags": [
          "User Acquisitions"
        ]
      }
    },
    "/api/v1//annotations": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "name": "user_acquisition_id",
            "in": "query",
            "description": "Filter by user_acquisition_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Filter by title (icontains)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/apps__api__response__PaginationModel"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/apps__api__serializers__annotation__AnnotationSerializer__Base"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "AnnotationManagement.get",
        "summary": "List user annotations",
        "description": "Retrieve a paginated list of annotations created by users. Annotations include highlights, notes, bookmarks, and other user-generated content associated with entries. Supports filtering by user, entry, and annotation type.",
        "tags": [
          "Annotations"
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Insufficient permissions')"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__annotation__AnnotationSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnnotationForm"
              }
            }
          }
        },
        "operationId": "AnnotationManagement.post",
        "summary": "Create annotation",
        "description": "Create a new annotation for an entry. Annotations can be highlights, notes, bookmarks, or other user-generated content that enhances the reading experience. Each annotation is associated with a specific location within the entry.",
        "tags": [
          "Annotations"
        ]
      }
    },
    "/api/v1//annotations/{annotation_id}": {
      "parameters": [
        {
          "name": "annotation_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__annotation__AnnotationSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "AnnotationDetail.get",
        "summary": "Get annotation details",
        "description": "Retrieve detailed information about a specific annotation including its content, position, type, and associated entry information.",
        "tags": [
          "Annotations"
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__annotation__AnnotationSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnnotationForm"
              }
            }
          }
        },
        "operationId": "AnnotationDetail.put",
        "summary": "Update annotation",
        "description": "Update an existing annotation's content, position, or type. Only the annotation creator can modify their annotations. This allows users to edit their notes, adjust highlights, or change annotation properties.",
        "tags": [
          "Annotations"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "AnnotationDetail.delete",
        "summary": "Delete annotation",
        "description": "Permanently delete an annotation. Only the annotation creator can delete their annotations. This action is irreversible and will remove all associated data.",
        "tags": [
          "Annotations"
        ]
      }
    },
    "/api/v1//annotation-items": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "name": "annotation_id",
            "in": "query",
            "description": "Filter by annotation_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Filter by page_number (exact)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/apps__api__response__PaginationModel"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/apps__api__serializers__annotation__AnnotationItemSerializer__Base"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "AnnotationItemManagement.get",
        "description": "List AnnotationItems",
        "tags": [
          "Annotation Items"
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Insufficient permissions')"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__annotation__AnnotationItemSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationItemForm"
              }
            }
          }
        },
        "operationId": "AnnotationItemManagement.post",
        "description": "Create AnnotationItem",
        "tags": [
          "Annotation Items"
        ]
      }
    },
    "/api/v1//annotation-items/{annotation_item_id}": {
      "parameters": [
        {
          "name": "annotation_item_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__annotation__AnnotationItemSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "AnnotationItemDetail.get",
        "description": "Get AnnotationItem detail",
        "tags": [
          "Annotation Items"
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__annotation__AnnotationItemSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationItemForm"
              }
            }
          }
        },
        "operationId": "AnnotationItemDetail.put",
        "description": "Update AnnotationItem detail",
        "tags": [
          "Annotation Items"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "AnnotationItemDetail.delete",
        "description": "Delete AnnotationItem",
        "tags": [
          "Annotation Items"
        ]
      }
    },
    "/api/v1//status": {
      "parameters": [],
      "get": {
        "parameters": [],
        "responses": {
          "503": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "'Some processes are not running properly'"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "StatusManagement.get",
        "summary": "System status and health check",
        "description": "System status and health check endpoint that provides real-time information about the application's operational status. Returns system statistics, process states, and version information. Includes supervisord process monitoring and fails with 503 if critical processes are not running properly.",
        "tags": [
          "Status"
        ]
      }
    },
    "/api/v1//token/refresh": {
      "parameters": [],
      "post": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": ""
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__tokens__TokenSerializer__Refresh"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenForm"
              }
            }
          }
        },
        "operationId": "RefreshTokenManagement.post",
        "summary": "Refresh access token",
        "description": "Generate a new access token using a valid refresh token. Validates the refresh token against the cache and returns a new access token for continued API access. The refresh token must be previously issued and not expired.",
        "tags": [
          "Tokens"
        ]
      }
    },
    "/api/v1//token": {
      "parameters": [],
      "post": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": ""
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__api__serializers__tokens__TokenSerializer__Access"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessTokenForm"
              }
            }
          }
        },
        "operationId": "AccessTokenManagement.post",
        "summary": "Create access token",
        "description": "Generate a new access token and refresh token pair using username and password authentication. Returns both an access token for immediate API access and a refresh token for obtaining new access tokens. Requires valid user credentials and creates a cached refresh token session.",
        "tags": [
          "Tokens"
        ]
      }
    },
    "/api/v1//languages": {
      "parameters": [],
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/apps__api__response__PaginationModel"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/apps__api__serializers__entries__LanguageSerializer__Base"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "LanguageManagement.get",
        "summary": "List available languages",
        "description": "Retrieve a paginated list of available languages that can be assigned to entries. This includes ISO language codes, native names, and English translations for internationalization support.",
        "tags": [
          "Enums"
        ]
      }
    },
    "/readium/v1//hooks": {
      "parameters": []
    },
    "/readium/v1//licenses": {
      "parameters": [],
      "get": {
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "entry_id",
            "in": "query",
            "description": "Filter by entry_id (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by state (exact)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ready",
                "active",
                "returned",
                "expired",
                "revoked",
                "cancelled"
              ]
            }
          },
          {
            "name": "starts_at__gte",
            "in": "query",
            "description": "Filter by starts_at__gte (gte)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "starts_at__lte",
            "in": "query",
            "description": "Filter by starts_at__lte (lte)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "expires_at__gte",
            "in": "query",
            "description": "Filter by expires_at__gte (gte)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "expires_at__lte",
            "in": "query",
            "description": "Filter by expires_at__lte (lte)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/apps__api__response__PaginationModel"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/apps__readium__serializers__LicenseSerializer__Base"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "LicenseManagement.get",
        "summary": "List all licenses",
        "description": "Retrieve a paginated list of licenses in the system. Returns license information including duration, start/end dates, user associations, and status. Supports filtering by various license attributes to help manage user access and permissions.",
        "tags": [
          "Licenses"
        ]
      },
      "post": {
        "parameters": [],
        "responses": {
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ValidationError"
                }
              }
            },
            "description": "Validation error"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__readium__serializers__LicenseSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLicenseForm"
              }
            }
          }
        },
        "operationId": "LicenseManagement.post",
        "summary": "Create new license",
        "description": "Create a new license for the authenticated user. Generates a license with specified duration, automatically setting start and expiration dates. If no start date is provided, defaults to current timestamp. Returns the created license with all metadata.",
        "tags": [
          "Licenses"
        ]
      }
    },
    "/readium/v1//licenses/{license_id}": {
      "parameters": [
        {
          "name": "license_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__readium__serializers__LicenseSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "LicenseDetail.get",
        "summary": "Get license details",
        "description": "Retrieve detailed information about a specific license. Returns comprehensive license data including duration, start/end dates, user information, and current status. Requires license manage permissions for the license owner.",
        "tags": [
          "Licenses"
        ]
      },
      "put": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/apps__readium__serializers__LicenseSerializer__Base"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLicenseForm"
              }
            }
          }
        },
        "operationId": "LicenseDetail.put",
        "summary": "Update license state",
        "description": "Update license state and properties. Supports state transitions like 'active', 'returned', 'renewed' etc. LCP operations are handled automatically based on state changes.",
        "tags": [
          "Licenses"
        ]
      }
    },
    "/readium/v1//licenses/{license_id}.lcpl": {
      "parameters": [
        {
          "name": "license_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('License not yet generated')"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('License has expired')"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Failed to generate license file')"
          }
        },
        "operationId": "LicenseDownloadView.get",
        "summary": "Download LCP license file",
        "description": "Download the LCP license file for a specific license. Returns the actual LCP license JSON that can be imported into reading applications.",
        "tags": [
          "Licenses"
        ]
      }
    },
    "/readium/v1//entries/{entry_id}/availability": {
      "parameters": [
        {
          "name": "entry_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Entry not found')"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": ""
          }
        },
        "operationId": "EntryAvailabilityView.get",
        "summary": "Get entry availability calendar",
        "description": "Get availability calendar for a readium-enabled entry. Returns information about available borrowing slots over a specified date range, suitable for displaying a calendar interface.",
        "tags": [
          "Readium"
        ]
      }
    },
    "/data/v1//acquisitions/{acquisition_id}": {
      "parameters": [
        {
          "name": "acquisition_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Acquisition file not found')"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "request"
          },
          "303": {
            "description": "See Other",
            "headers": {
              "Location": {
                "description": "The URL to which the client should be redirected",
                "schema": {
                  "type": "string",
                  "format": "url"
                }
              }
            }
          },
          "200": {
            "description": "File response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "operationId": "AcquisitionDownload.get",
        "description": "Download Acquisition content",
        "tags": [
          "Files"
        ]
      }
    },
    "/data/v1//user-acquisitions/{user_acquisition_id}": {
      "parameters": [
        {
          "name": "user_acquisition_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Page not found')"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "request"
          },
          "200": {
            "description": "File response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "operationId": "UserAcquisitionDownload.get",
        "description": "Download UserAcquisition content",
        "tags": [
          "Files"
        ]
      }
    },
    "/data/v1//covers/{entry_id}": {
      "parameters": [
        {
          "name": "entry_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Entry image file not found')"
          },
          "200": {
            "description": "File response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "operationId": "EntryImageDownload.get",
        "description": "Download Entry cover image",
        "tags": [
          "Files"
        ]
      }
    },
    "/data/v1//thumbnails/{entry_id}": {
      "parameters": [
        {
          "name": "entry_id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "get": {
        "parameters": [],
        "responses": {
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apps__core__errors__ProblemDetail"
                }
              }
            },
            "description": "_('Entry thumbnail file not found')"
          },
          "200": {
            "description": "File response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "operationId": "EntryThumbnailDownload.get",
        "description": "Download Entry thumbnail",
        "tags": [
          "Files"
        ]
      }
    },
    "/^static/(?P<path>.*)$": {
      "parameters": []
    },
    "/^media/(?P<path>.*)$": {
      "parameters": []
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "code": {
            "type": "integer",
            "description": "Error code"
          },
          "details": {
            "type": "object",
            "description": "Additional error details"
          }
        },
        "required": [
          "error",
          "code"
        ]
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "field_errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Field-specific validation errors"
          },
          "non_field_errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "General validation errors"
          }
        }
      },
      "PaginationMetadata": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1,
            "description": "Current page number"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "description": "Items per page"
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of items"
          },
          "has_next": {
            "type": "boolean",
            "description": "Whether there is a next page"
          },
          "has_previous": {
            "type": "boolean",
            "description": "Whether there is a previous page"
          }
        },
        "required": [
          "page",
          "limit",
          "total",
          "has_next",
          "has_previous"
        ]
      },
      "PaginatedResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginationMetadata"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of items"
          }
        },
        "required": [
          "metadata",
          "items"
        ]
      },
      "apps__api__serializers__api_keys__ApiKeySerializer__Base": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "title": "User Id",
            "type": "string"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Name"
          },
          "is_active": {
            "title": "Is Active",
            "type": "boolean"
          },
          "last_seen_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Last Seen At"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "id",
          "user_id",
          "name",
          "is_active",
          "last_seen_at",
          "created_at",
          "updated_at"
        ],
        "title": "ApiKeySerializer.Base",
        "type": "object"
      },
      "apps__core__errors__ValidationErrorItem": {
        "properties": {
          "code": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Code"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "path": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Path"
          }
        },
        "required": [
          "message"
        ],
        "title": "ValidationErrorItem",
        "type": "object"
      },
      "apps__api__serializers__users__UserSerializer__Minimal": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "surname": {
            "title": "Surname",
            "type": "string"
          }
        },
        "required": [
          "id",
          "username",
          "name",
          "surname"
        ],
        "title": "UserSerializer.Minimal",
        "type": "object"
      },
      "AcquisitionMIME": {
        "enum": [
          "application/pdf",
          "application/epub+zip",
          "application/x-mobipocket-ebook",
          "application/webpub+zip"
        ],
        "title": "AcquisitionMIME",
        "type": "string"
      },
      "AcquisitionType": {
        "enum": [
          "acquisition",
          "open-access",
          "borrow"
        ],
        "title": "AcquisitionType",
        "type": "string"
      },
      "FeedKind": {
        "enum": [
          "navigation",
          "acquisition"
        ],
        "title": "FeedKind",
        "type": "string"
      },
      "apps__api__serializers__entries__EntrySerializer__Base": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "creator_id": {
            "format": "uuid",
            "title": "Creator Id",
            "type": "string"
          },
          "catalog_id": {
            "format": "uuid",
            "title": "Catalog Id",
            "type": "string"
          },
          "shelf_record_id": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Shelf Record Id"
          },
          "entry_authors": {
            "items": {
              "$ref": "#/components/schemas/apps__api__serializers__entries__AuthorSerializer__Base"
            },
            "title": "Entry Authors",
            "type": "array"
          },
          "categories": {
            "items": {
              "$ref": "#/components/schemas/apps__api__serializers__entries__CategorySerializer__Base"
            },
            "title": "Categories",
            "type": "array"
          },
          "language": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/apps__api__serializers__entries__LanguageSerializer__Base"
              }
            ],
            "nullable": true
          },
          "feeds": {
            "items": {
              "$ref": "#/components/schemas/apps__api__serializers__feeds__FeedSerializer__Base"
            },
            "title": "Feeds",
            "type": "array"
          },
          "acquisitions": {
            "items": {
              "$ref": "#/components/schemas/apps__api__serializers__entries__AcquisitionSerializer__Base"
            },
            "title": "Acquisitions",
            "type": "array"
          },
          "popularity": {
            "title": "Popularity",
            "type": "integer"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "summary": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Summary"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Image Url"
          },
          "image_mime": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Image Mime"
          },
          "thumbnail_url": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Thumbnail Url"
          },
          "config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              }
            ],
            "nullable": true,
            "title": "Config"
          },
          "citation": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Citation"
          },
          "touched_at": {
            "format": "date-time",
            "title": "Touched At",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "id",
          "creator_id",
          "catalog_id",
          "language",
          "popularity",
          "title",
          "summary",
          "image_mime",
          "config",
          "citation",
          "touched_at",
          "created_at",
          "updated_at"
        ],
        "title": "EntrySerializer.Base",
        "type": "object"
      },
      "Mode": {
        "enum": [
          "read",
          "write",
          "manage"
        ],
        "title": "Mode",
        "type": "string"
      },
      "apps__api__serializers__users__UserSerializer__Detailed": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "surname": {
            "title": "Surname",
            "type": "string"
          },
          "is_superuser": {
            "title": "Is Superuser",
            "type": "boolean"
          },
          "is_active": {
            "title": "Is Active",
            "type": "boolean"
          },
          "last_login": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Last Login"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "title": "Permissions",
            "type": "array"
          },
          "catalog_permissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Mode"
            },
            "propertyNames": {
              "format": "uuid"
            },
            "title": "Catalog Permissions",
            "type": "object"
          }
        },
        "required": [
          "id",
          "username",
          "name",
          "surname",
          "is_superuser",
          "is_active",
          "last_login",
          "created_at",
          "updated_at",
          "permissions"
        ],
        "title": "UserSerializer.Detailed",
        "type": "object"
      },
      "LicenseState": {
        "enum": [
          "ready",
          "active",
          "returned",
          "expired",
          "revoked",
          "cancelled"
        ],
        "title": "LicenseState",
        "type": "string"
      },
      "apps__readium__serializers__LicenseSerializer__Base": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "entry_id": {
            "format": "uuid",
            "title": "Entry Id",
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "title": "User Id",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/LicenseState"
          },
          "starts_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Starts At"
          },
          "expires_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Expires At"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "id",
          "entry_id",
          "user_id",
          "state",
          "starts_at",
          "expires_at",
          "created_at",
          "updated_at"
        ],
        "title": "LicenseSerializer.Base",
        "type": "object"
      },
      "apps__api__serializers__status__StatusStatistics": {
        "properties": {
          "catalogs": {
            "title": "Catalogs",
            "type": "integer"
          },
          "entries": {
            "title": "Entries",
            "type": "integer"
          },
          "acquisitions": {
            "title": "Acquisitions",
            "type": "integer"
          },
          "users": {
            "title": "Users",
            "type": "integer"
          }
        },
        "required": [
          "catalogs",
          "entries",
          "acquisitions",
          "users"
        ],
        "title": "StatusStatistics",
        "type": "object"
      },
      "Minimal": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "surname": {
            "title": "Surname",
            "type": "string"
          }
        },
        "required": [
          "id",
          "username",
          "name",
          "surname"
        ],
        "title": "UserSerializer.Minimal",
        "type": "object"
      },
      "apps__api__serializers__catalogs__UserCatalog": {
        "properties": {
          "mode": {
            "title": "Mode",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/Minimal"
          }
        },
        "required": [
          "mode",
          "user"
        ],
        "title": "UserCatalog",
        "type": "object"
      },
      "apps__api__serializers__feeds__FeedSerializer__Base": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "catalog_id": {
            "format": "uuid",
            "title": "Catalog Id",
            "type": "string"
          },
          "parents": {
            "default": [],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Parents",
            "type": "array"
          },
          "children": {
            "default": [],
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Children",
            "type": "array"
          },
          "creator_id": {
            "format": "uuid",
            "title": "Creator Id",
            "type": "string"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "kind": {
            "$ref": "#/components/schemas/FeedKind"
          },
          "url_name": {
            "title": "Url Name",
            "type": "string"
          },
          "url": {
            "default": null,
            "title": "Url",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          },
          "per_page": {
            "anyOf": [
              {
                "type": "integer"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Per Page"
          },
          "touched_at": {
            "format": "date-time",
            "title": "Touched At",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "id",
          "catalog_id",
          "creator_id",
          "title",
          "kind",
          "url_name",
          "content",
          "touched_at",
          "created_at",
          "updated_at"
        ],
        "title": "FeedSerializer.Base",
        "type": "object"
      },
      "StatusStatistics": {
        "properties": {
          "catalogs": {
            "title": "Catalogs",
            "type": "integer"
          },
          "entries": {
            "title": "Entries",
            "type": "integer"
          },
          "acquisitions": {
            "title": "Acquisitions",
            "type": "integer"
          },
          "users": {
            "title": "Users",
            "type": "integer"
          }
        },
        "required": [
          "catalogs",
          "entries",
          "acquisitions",
          "users"
        ],
        "title": "StatusStatistics",
        "type": "object"
      },
      "apps__api__serializers__status__StatusSerializer": {
        "properties": {
          "timestamp": {
            "format": "date-time",
            "title": "Timestamp",
            "type": "string"
          },
          "instance": {
            "title": "Instance",
            "type": "string"
          },
          "stats": {
            "$ref": "#/components/schemas/StatusStatistics"
          },
          "build": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Build"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Version"
          },
          "python": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Python"
          },
          "supervisord": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Supervisord"
          }
        },
        "required": [
          "timestamp",
          "instance",
          "stats"
        ],
        "title": "StatusSerializer",
        "type": "object"
      },
      "apps__api__response__PaginationModel": {
        "properties": {
          "page": {
            "title": "Page",
            "type": "integer"
          },
          "limit": {
            "anyOf": [
              {
                "type": "integer"
              }
            ],
            "nullable": true,
            "title": "Limit"
          },
          "pages": {
            "title": "Pages",
            "type": "integer"
          },
          "total": {
            "title": "Total",
            "type": "integer"
          }
        },
        "required": [
          "page",
          "limit",
          "pages",
          "total"
        ],
        "title": "PaginationModel",
        "type": "object"
      },
      "apps__api__serializers__tokens__TokenSerializer__Refresh": {
        "properties": {
          "access_token": {
            "title": "Access Token",
            "type": "string"
          }
        },
        "required": [
          "access_token"
        ],
        "title": "TokenSerializer.Refresh",
        "type": "object"
      },
      "apps__api__serializers__annotation__AnnotationItemSerializer__Base": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "annotation_id": {
            "format": "uuid",
            "title": "Annotation Id",
            "type": "string"
          },
          "page": {
            "title": "Page",
            "type": "integer"
          },
          "content": {
            "title": "Content",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "id",
          "annotation_id",
          "page",
          "content",
          "created_at",
          "updated_at"
        ],
        "title": "AnnotationItemSerializer.Base",
        "type": "object"
      },
      "apps__api__serializers__entries__AcquisitionSerializer__Nested": {
        "properties": {
          "relation": {
            "$ref": "#/components/schemas/AcquisitionType"
          },
          "mime": {
            "$ref": "#/components/schemas/AcquisitionMIME"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Url"
          }
        },
        "required": [
          "relation",
          "mime"
        ],
        "title": "AcquisitionSerializer.Nested",
        "type": "object"
      },
      "DetailType": {
        "enum": [
          "/out-of-range",
          "/not-found",
          "/validation-error",
          "/conflict"
        ],
        "title": "DetailType",
        "type": "string"
      },
      "apps__core__errors__ProblemDetail": {
        "properties": {
          "title": {
            "title": "Title",
            "type": "string"
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DetailType"
              }
            ],
            "default": null,
            "nullable": true
          },
          "detail": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Detail"
          },
          "trace": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Trace"
          },
          "additional_data": {
            "anyOf": [
              {}
            ],
            "default": null,
            "nullable": true,
            "title": "Additional Data"
          }
        },
        "required": [
          "title"
        ],
        "title": "ProblemDetail",
        "type": "object"
      },
      "apps__api__serializers__entries__AuthorSerializer__Detailed": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "surname": {
            "title": "Surname",
            "type": "string"
          },
          "catalog_id": {
            "format": "uuid",
            "title": "Catalog Id",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "surname",
          "catalog_id",
          "created_at",
          "updated_at"
        ],
        "title": "AuthorSerializer.Detailed",
        "type": "object"
      },
      "ValidationErrorItem": {
        "properties": {
          "code": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Code"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "path": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Path"
          }
        },
        "required": [
          "message"
        ],
        "title": "ValidationErrorItem",
        "type": "object"
      },
      "apps__core__errors__ValidationError": {
        "properties": {
          "title": {
            "title": "Title",
            "type": "string"
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DetailType"
              }
            ],
            "default": null,
            "nullable": true
          },
          "detail": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Detail"
          },
          "trace": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Trace"
          },
          "additional_data": {
            "anyOf": [
              {}
            ],
            "default": null,
            "nullable": true,
            "title": "Additional Data"
          },
          "validation_errors": {
            "items": {
              "$ref": "#/components/schemas/ValidationErrorItem"
            },
            "title": "Validation Errors",
            "type": "array"
          }
        },
        "required": [
          "title",
          "validation_errors"
        ],
        "title": "ValidationError",
        "type": "object"
      },
      "apps__api__serializers__entries__AuthorSerializer__Base": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "surname": {
            "title": "Surname",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "surname"
        ],
        "title": "AuthorSerializer.Base",
        "type": "object"
      },
      "apps__api__serializers__entries__EntrySerializer__Detailed": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "creator_id": {
            "format": "uuid",
            "title": "Creator Id",
            "type": "string"
          },
          "catalog_id": {
            "format": "uuid",
            "title": "Catalog Id",
            "type": "string"
          },
          "shelf_record_id": {
            "anyOf": [
              {
                "format": "uuid",
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Shelf Record Id"
          },
          "entry_authors": {
            "items": {
              "$ref": "#/components/schemas/apps__api__serializers__entries__AuthorSerializer__Base"
            },
            "title": "Entry Authors",
            "type": "array"
          },
          "categories": {
            "items": {
              "$ref": "#/components/schemas/apps__api__serializers__entries__CategorySerializer__Base"
            },
            "title": "Categories",
            "type": "array"
          },
          "language": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/apps__api__serializers__entries__LanguageSerializer__Base"
              }
            ],
            "nullable": true
          },
          "feeds": {
            "items": {
              "$ref": "#/components/schemas/apps__api__serializers__feeds__FeedSerializer__Base"
            },
            "title": "Feeds",
            "type": "array"
          },
          "acquisitions": {
            "items": {
              "$ref": "#/components/schemas/apps__api__serializers__entries__AcquisitionSerializer__Base"
            },
            "title": "Acquisitions",
            "type": "array"
          },
          "popularity": {
            "title": "Popularity",
            "type": "integer"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "summary": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Summary"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Image Url"
          },
          "image_mime": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Image Mime"
          },
          "thumbnail_url": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Thumbnail Url"
          },
          "config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              }
            ],
            "nullable": true,
            "title": "Config"
          },
          "citation": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Citation"
          },
          "touched_at": {
            "format": "date-time",
            "title": "Touched At",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "published_at": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Published At"
          },
          "publisher": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Publisher"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Content"
          },
          "identifiers": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              }
            ],
            "nullable": true,
            "title": "Identifiers"
          }
        },
        "required": [
          "id",
          "creator_id",
          "catalog_id",
          "language",
          "popularity",
          "title",
          "summary",
          "image_mime",
          "config",
          "citation",
          "touched_at",
          "created_at",
          "updated_at",
          "published_at",
          "publisher",
          "content",
          "identifiers"
        ],
        "title": "EntrySerializer.Detailed",
        "type": "object"
      },
      "UserCatalog": {
        "properties": {
          "mode": {
            "title": "Mode",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/Minimal"
          }
        },
        "required": [
          "mode",
          "user"
        ],
        "title": "UserCatalog",
        "type": "object"
      },
      "apps__api__serializers__catalogs__CatalogSerializer__Detailed": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "creator_id": {
            "format": "uuid",
            "title": "Creator Id",
            "type": "string"
          },
          "url_name": {
            "title": "Url Name",
            "type": "string"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "is_public": {
            "title": "Is Public",
            "type": "boolean"
          },
          "touched_at": {
            "format": "date-time",
            "title": "Touched At",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "user_catalogs": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/UserCatalog"
            },
            "title": "User Catalogs",
            "type": "array"
          }
        },
        "required": [
          "id",
          "creator_id",
          "url_name",
          "title",
          "is_public",
          "touched_at",
          "created_at",
          "updated_at"
        ],
        "title": "CatalogSerializer.Detailed",
        "type": "object"
      },
      "PaginationModel": {
        "properties": {
          "page": {
            "title": "Page",
            "type": "integer"
          },
          "limit": {
            "anyOf": [
              {
                "type": "integer"
              }
            ],
            "nullable": true,
            "title": "Limit"
          },
          "pages": {
            "title": "Pages",
            "type": "integer"
          },
          "total": {
            "title": "Total",
            "type": "integer"
          }
        },
        "required": [
          "page",
          "limit",
          "pages",
          "total"
        ],
        "title": "PaginationModel",
        "type": "object"
      },
      "RootModel_TypeVar_": {
        "title": "RootModel[TypeVar]"
      },
      "apps__api__response__PaginationResponseModel": {
        "properties": {
          "items": {
            "$ref": "#/components/schemas/RootModel_TypeVar_"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginationModel"
          }
        },
        "required": [
          "items",
          "metadata"
        ],
        "title": "PaginationResponseModel",
        "type": "object"
      },
      "apps__api__serializers__entries__AcquisitionSerializer__Base": {
        "properties": {
          "relation": {
            "$ref": "#/components/schemas/AcquisitionType"
          },
          "mime": {
            "$ref": "#/components/schemas/AcquisitionMIME"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Url"
          },
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          }
        },
        "required": [
          "relation",
          "mime",
          "id"
        ],
        "title": "AcquisitionSerializer.Base",
        "type": "object"
      },
      "apps__api__response__SingleResponseModel": {
        "properties": {
          "response": {
            "title": "Response"
          }
        },
        "required": [
          "response"
        ],
        "title": "SingleResponseModel",
        "type": "object"
      },
      "apps__api__serializers__shelf_records__ShelfRecordSerializer__Base": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "title": "User Id",
            "type": "string"
          },
          "entry": {
            "$ref": "#/components/schemas/apps__api__serializers__entries__EntrySerializer__Base"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "id",
          "user_id",
          "entry",
          "created_at",
          "updated_at"
        ],
        "title": "ShelfRecordSerializer.Base",
        "type": "object"
      },
      "Detailed": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "surname": {
            "title": "Surname",
            "type": "string"
          },
          "is_superuser": {
            "title": "Is Superuser",
            "type": "boolean"
          },
          "is_active": {
            "title": "Is Active",
            "type": "boolean"
          },
          "last_login": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Last Login"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "title": "Permissions",
            "type": "array"
          },
          "catalog_permissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Mode"
            },
            "propertyNames": {
              "format": "uuid"
            },
            "title": "Catalog Permissions",
            "type": "object"
          }
        },
        "required": [
          "id",
          "username",
          "name",
          "surname",
          "is_superuser",
          "is_active",
          "last_login",
          "created_at",
          "updated_at",
          "permissions"
        ],
        "title": "UserSerializer.Detailed",
        "type": "object"
      },
      "apps__api__serializers__tokens__TokenSerializer__Access": {
        "properties": {
          "access_token": {
            "title": "Access Token",
            "type": "string"
          },
          "refresh_token": {
            "title": "Refresh Token",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/Detailed"
          }
        },
        "required": [
          "access_token",
          "refresh_token",
          "user"
        ],
        "title": "TokenSerializer.Access",
        "type": "object"
      },
      "apps__api__serializers__catalogs__CatalogSerializer__Base": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "creator_id": {
            "format": "uuid",
            "title": "Creator Id",
            "type": "string"
          },
          "url_name": {
            "title": "Url Name",
            "type": "string"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "is_public": {
            "title": "Is Public",
            "type": "boolean"
          },
          "touched_at": {
            "format": "date-time",
            "title": "Touched At",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "id",
          "creator_id",
          "url_name",
          "title",
          "is_public",
          "touched_at",
          "created_at",
          "updated_at"
        ],
        "title": "CatalogSerializer.Base",
        "type": "object"
      },
      "apps__api__serializers__annotation__AnnotationSerializer__Base": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "user_acquisition_id": {
            "format": "uuid",
            "title": "User Acquisition Id",
            "type": "string"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "id",
          "user_acquisition_id",
          "title",
          "created_at",
          "updated_at"
        ],
        "title": "AnnotationSerializer.Base",
        "type": "object"
      },
      "Nested": {
        "properties": {
          "relation": {
            "$ref": "#/components/schemas/AcquisitionType"
          },
          "mime": {
            "$ref": "#/components/schemas/AcquisitionMIME"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Url"
          }
        },
        "required": [
          "relation",
          "mime"
        ],
        "title": "AcquisitionSerializer.Nested",
        "type": "object"
      },
      "UserAcquisitionType": {
        "enum": [
          "shared",
          "personal"
        ],
        "title": "UserAcquisitionType",
        "type": "string"
      },
      "apps__api__serializers__user_acquisitions__UserAcquisitionSerializer__Base": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/UserAcquisitionType"
          },
          "range": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Range"
          },
          "user": {
            "$ref": "#/components/schemas/Minimal"
          },
          "acquisition": {
            "$ref": "#/components/schemas/Nested"
          },
          "url": {
            "default": null,
            "title": "Url",
            "type": "string"
          },
          "entry": {
            "$ref": "#/components/schemas/apps__api__serializers__entries__EntrySerializer__Base"
          },
          "expire_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Expire At"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "range",
          "user",
          "acquisition",
          "entry",
          "expire_at",
          "created_at",
          "updated_at"
        ],
        "title": "UserAcquisitionSerializer.Base",
        "type": "object"
      },
      "apps__api__serializers__entries__CategorySerializer__Base": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "term": {
            "title": "Term",
            "type": "string"
          }
        },
        "required": [
          "id",
          "term"
        ],
        "title": "CategorySerializer.Base",
        "type": "object"
      },
      "apps__api__serializers__entries__LanguageSerializer__Base": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "alpha2": {
            "title": "Alpha2",
            "type": "string"
          },
          "alpha3": {
            "title": "Alpha3",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "alpha2",
          "alpha3"
        ],
        "title": "LanguageSerializer.Base",
        "type": "object"
      },
      "apps__api__serializers__entries__AcquisitionSerializer__Detailed": {
        "properties": {
          "relation": {
            "$ref": "#/components/schemas/AcquisitionType"
          },
          "mime": {
            "$ref": "#/components/schemas/AcquisitionMIME"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "default": null,
            "nullable": true,
            "title": "Url"
          },
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "base64": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Base64"
          },
          "checksum": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Checksum"
          }
        },
        "required": [
          "relation",
          "mime",
          "id",
          "base64",
          "checksum"
        ],
        "title": "AcquisitionSerializer.Detailed",
        "type": "object"
      },
      "apps__api__serializers__entries__CategorySerializer__Detailed": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "term": {
            "title": "Term",
            "type": "string"
          },
          "catalog_id": {
            "format": "uuid",
            "title": "Catalog Id",
            "type": "string"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Label"
          },
          "scheme": {
            "anyOf": [
              {
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Scheme"
          }
        },
        "required": [
          "id",
          "term",
          "catalog_id",
          "label",
          "scheme"
        ],
        "title": "CategorySerializer.Detailed",
        "type": "object"
      },
      "apps__api__serializers__users__UserSerializer__Base": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "surname": {
            "title": "Surname",
            "type": "string"
          },
          "is_superuser": {
            "title": "Is Superuser",
            "type": "boolean"
          },
          "is_active": {
            "title": "Is Active",
            "type": "boolean"
          },
          "last_login": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              }
            ],
            "nullable": true,
            "title": "Last Login"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "id",
          "username",
          "name",
          "surname",
          "is_superuser",
          "is_active",
          "last_login",
          "created_at",
          "updated_at"
        ],
        "title": "UserSerializer.Base",
        "type": "object"
      },
      "ApiKeyForm": {
        "type": "object",
        "title": "ApiKeyForm",
        "properties": {
          "user_id": {
            "title": "user_id",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "title": "name",
            "description": "",
            "type": "string",
            "maxLength": 100
          },
          "is_active": {
            "title": "is_active",
            "description": "",
            "type": "boolean"
          }
        }
      },
      "FeedForm": {
        "type": "object",
        "title": "FeedForm",
        "properties": {
          "catalog_id": {
            "title": "catalog_id",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "title": "title",
            "description": "",
            "type": "string",
            "maxLength": 100
          },
          "url_name": {
            "title": "url_name",
            "description": "",
            "type": "string",
            "maxLength": 50
          },
          "kind": {
            "title": "kind",
            "description": "",
            "type": "string",
            "enum": [
              "navigation",
              "acquisition"
            ]
          },
          "content": {
            "title": "content",
            "description": "",
            "type": "string"
          },
          "per_page": {
            "title": "per_page",
            "description": "",
            "type": "integer",
            "minimum": 1
          },
          "entries": {
            "title": "entries",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          "parents": {
            "title": "parents",
            "description": "",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "catalog_id",
          "title",
          "url_name",
          "kind",
          "content"
        ]
      },
      "UserAcquisitionForm": {
        "type": "object",
        "title": "UserAcquisitionForm",
        "properties": {
          "acquisition_id": {
            "title": "acquisition_id",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "title": "type",
            "description": "",
            "type": "string",
            "enum": [
              "shared",
              "personal"
            ]
          },
          "range": {
            "title": "range",
            "description": "",
            "type": "string"
          },
          "expire_at": {
            "title": "expire_at",
            "description": "",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "acquisition_id",
          "type"
        ]
      },
      "AccessTokenForm": {
        "type": "object",
        "title": "AccessTokenForm",
        "properties": {
          "username": {
            "title": "username",
            "description": "",
            "type": "string",
            "maxLength": 200
          },
          "password": {
            "title": "password",
            "description": "",
            "type": "string"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "UpdateAnnotationForm": {
        "type": "object",
        "title": "UpdateAnnotationForm",
        "properties": {
          "title": {
            "title": "title",
            "description": "",
            "type": "string"
          }
        },
        "required": [
          "title"
        ]
      },
      "AcquisitionForm": {
        "type": "object",
        "title": "AcquisitionForm",
        "properties": {
          "relation": {
            "title": "relation",
            "description": "",
            "type": "string",
            "enum": [
              "acquisition",
              "open-access",
              "borrow"
            ]
          },
          "prices": {
            "title": "prices",
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceForm"
            }
          },
          "content": {
            "title": "content",
            "description": "",
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "content"
        ]
      },
      "PriceForm": {
        "type": "object",
        "title": "PriceForm",
        "properties": {
          "currency_code": {
            "title": "currency_code",
            "description": "",
            "type": "string"
          },
          "value": {
            "title": "value",
            "description": "",
            "type": "integer"
          }
        },
        "required": [
          "currency_code",
          "value"
        ]
      },
      "AcquisitionMetaForm": {
        "type": "object",
        "title": "AcquisitionMetaForm",
        "properties": {
          "relation": {
            "title": "relation",
            "description": "",
            "type": "string",
            "enum": [
              "acquisition",
              "open-access",
              "borrow"
            ]
          },
          "prices": {
            "title": "prices",
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceForm"
            }
          }
        }
      },
      "UpdateLicenseForm": {
        "type": "object",
        "title": "UpdateLicenseForm",
        "properties": {
          "state": {
            "title": "state",
            "description": "",
            "type": "string",
            "enum": [
              "ready",
              "active",
              "returned",
              "expired",
              "revoked",
              "cancelled"
            ]
          },
          "duration": {
            "title": "duration",
            "description": "Duration in ISO 8601 format. Example: \"PT1H30M\" for 1 hour and 30 minutes.\nThe format is defined as follows:\n- \"P\" indicates the period.\n- \"Y\" for years, \"M\" for months, \"D\" for days.\n- \"T\" indicates the start of the time section.\n- \"H\" for hours, \"M\" for minutes, \"S\" for seconds.\n- Valid examples include:\n  - \"PT30M\" (30 minutes)\n  - \"P1Y2M10DT5H30M\" (1 year, 2 months, 10 days, 5 hours, and 30 minutes)",
            "type": "string",
            "example": "P14D",
            "pattern": "^P(?!P)(?:(\\d+Y)?(\\d+M)?(\\d+D)?(T(?:(\\d+H)?(\\d+M)?(\\d+S)?))?)?$"
          }
        },
        "required": [
          "state",
          "duration"
        ]
      },
      "CreateAuthorForm": {
        "type": "object",
        "title": "CreateAuthorForm",
        "properties": {
          "name": {
            "title": "name",
            "description": "",
            "type": "string",
            "maxLength": 255
          },
          "surname": {
            "title": "surname",
            "description": "",
            "type": "string",
            "maxLength": 255
          },
          "catalog_id": {
            "title": "catalog_id",
            "description": "",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name",
          "surname",
          "catalog_id"
        ]
      },
      "CreateUserForm": {
        "type": "object",
        "title": "CreateUserForm",
        "properties": {
          "name": {
            "title": "name",
            "description": "",
            "type": "string",
            "maxLength": 30
          },
          "surname": {
            "title": "surname",
            "description": "",
            "type": "string",
            "maxLength": 150
          },
          "password": {
            "title": "password",
            "description": "",
            "type": "string"
          },
          "is_active": {
            "title": "is_active",
            "description": "",
            "type": "boolean"
          },
          "username": {
            "title": "username",
            "description": "",
            "type": "string",
            "maxLength": 200
          }
        },
        "required": [
          "name",
          "surname",
          "password",
          "username"
        ]
      },
      "ShelfRecordForm": {
        "type": "object",
        "title": "ShelfRecordForm",
        "properties": {
          "entry_id": {
            "title": "entry_id",
            "description": "",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "entry_id"
        ]
      },
      "RefreshTokenForm": {
        "type": "object",
        "title": "RefreshTokenForm",
        "properties": {
          "refresh": {
            "title": "refresh",
            "description": "",
            "type": "string"
          }
        },
        "required": [
          "refresh"
        ]
      },
      "CatalogForm": {
        "type": "object",
        "title": "CatalogForm",
        "properties": {
          "url_name": {
            "title": "url_name",
            "description": "",
            "type": "string"
          },
          "title": {
            "title": "title",
            "description": "",
            "type": "string",
            "maxLength": 100
          },
          "is_public": {
            "title": "is_public",
            "description": "",
            "type": "boolean"
          },
          "users": {
            "title": "users",
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserCatalogForm"
            }
          }
        },
        "required": [
          "url_name",
          "title"
        ]
      },
      "EntryConfigForm": {
        "type": "object",
        "title": "EntryConfigForm",
        "properties": {
          "evilflowers_ocr_enabled": {
            "title": "evilflowers_ocr_enabled",
            "description": "",
            "type": "boolean"
          },
          "evilflowers_ocr_rewrite": {
            "title": "evilflowers_ocr_rewrite",
            "description": "",
            "type": "boolean"
          },
          "evilflowers_annotations_create": {
            "title": "evilflowers_annotations_create",
            "description": "",
            "type": "boolean"
          },
          "evilflowers_viewer_print": {
            "title": "evilflowers_viewer_print",
            "description": "",
            "type": "boolean"
          },
          "evilflowers_share_enabled": {
            "title": "evilflowers_share_enabled",
            "description": "",
            "type": "boolean"
          },
          "evilflowers_metadata_fetch": {
            "title": "evilflowers_metadata_fetch",
            "description": "",
            "type": "boolean"
          },
          "readium_enabled": {
            "title": "readium_enabled",
            "description": "",
            "type": "boolean"
          },
          "evilflowers_render_type": {
            "title": "evilflowers_render_type",
            "description": "",
            "type": "string",
            "enum": [
              "document",
              "page"
            ]
          }
        }
      },
      "CategoryForm": {
        "type": "object",
        "title": "CategoryForm",
        "properties": {
          "catalog_id": {
            "title": "catalog_id",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          "term": {
            "title": "term",
            "description": "",
            "type": "string",
            "maxLength": 255
          },
          "label": {
            "title": "label",
            "description": "",
            "type": "string",
            "maxLength": 255
          },
          "scheme": {
            "title": "scheme",
            "description": "",
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "term"
        ]
      },
      "CreateAnnotationForm": {
        "type": "object",
        "title": "CreateAnnotationForm",
        "properties": {
          "user_acquisition_id": {
            "title": "user_acquisition_id",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "title": "title",
            "description": "",
            "type": "string"
          }
        },
        "required": [
          "user_acquisition_id",
          "title"
        ]
      },
      "CreateLicenseForm": {
        "type": "object",
        "title": "CreateLicenseForm",
        "properties": {
          "entry_id": {
            "title": "entry_id",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "title": "state",
            "description": "",
            "type": "string",
            "enum": [
              "ready",
              "active",
              "returned",
              "expired",
              "revoked",
              "cancelled"
            ]
          },
          "duration": {
            "title": "duration",
            "description": "Duration in ISO 8601 format. Example: \"PT1H30M\" for 1 hour and 30 minutes.\nThe format is defined as follows:\n- \"P\" indicates the period.\n- \"Y\" for years, \"M\" for months, \"D\" for days.\n- \"T\" indicates the start of the time section.\n- \"H\" for hours, \"M\" for minutes, \"S\" for seconds.\n- Valid examples include:\n  - \"PT30M\" (30 minutes)\n  - \"P1Y2M10DT5H30M\" (1 year, 2 months, 10 days, 5 hours, and 30 minutes)",
            "type": "string",
            "example": "P14D",
            "pattern": "^P(?!P)(?:(\\d+Y)?(\\d+M)?(\\d+D)?(T(?:(\\d+H)?(\\d+M)?(\\d+S)?))?)?$"
          },
          "starts_at": {
            "title": "starts_at",
            "description": "",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "entry_id",
          "state",
          "duration"
        ]
      },
      "UserCatalogForm": {
        "type": "object",
        "title": "UserCatalogForm",
        "properties": {
          "user_id": {
            "title": "user_id",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          "mode": {
            "title": "mode",
            "description": "",
            "type": "string",
            "enum": [
              "read",
              "write",
              "manage"
            ]
          }
        },
        "required": [
          "user_id",
          "mode"
        ]
      },
      "EntryForm": {
        "type": "object",
        "title": "EntryForm",
        "properties": {
          "id": {
            "title": "id",
            "description": "",
            "type": "string"
          },
          "language_code": {
            "title": "language_code",
            "description": "",
            "type": "string",
            "maxLength": 3
          },
          "category_ids": {
            "title": "category_ids",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          "authors": {
            "title": "authors",
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorForm"
            }
          },
          "author_ids": {
            "title": "author_ids",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          "feeds": {
            "title": "feeds",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          "categories": {
            "title": "categories",
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryForm"
            }
          },
          "title": {
            "title": "title",
            "description": "",
            "type": "string",
            "maxLength": 255
          },
          "publisher": {
            "title": "publisher",
            "description": "",
            "type": "string",
            "maxLength": 255
          },
          "published_at": {
            "title": "published_at",
            "description": "",
            "type": "string"
          },
          "summary": {
            "title": "summary",
            "description": "",
            "type": "string"
          },
          "content": {
            "title": "content",
            "description": "",
            "type": "string"
          },
          "acquisitions": {
            "title": "acquisitions",
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AcquisitionForm"
            }
          },
          "identifiers": {
            "title": "identifiers",
            "description": "",
            "type": "string"
          },
          "image": {
            "title": "image",
            "description": "",
            "type": "string",
            "format": "uri"
          },
          "config": {
            "title": "config",
            "description": "",
            "$ref": "#/components/schemas/EntryConfigForm"
          },
          "citation": {
            "title": "citation",
            "description": "",
            "type": "string"
          }
        },
        "required": [
          "language_code",
          "title"
        ]
      },
      "AuthorForm": {
        "type": "object",
        "title": "AuthorForm",
        "properties": {
          "name": {
            "title": "name",
            "description": "",
            "type": "string",
            "maxLength": 255
          },
          "surname": {
            "title": "surname",
            "description": "",
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name",
          "surname"
        ]
      },
      "UserForm": {
        "type": "object",
        "title": "UserForm",
        "properties": {
          "name": {
            "title": "name",
            "description": "",
            "type": "string",
            "maxLength": 30
          },
          "surname": {
            "title": "surname",
            "description": "",
            "type": "string",
            "maxLength": 150
          },
          "password": {
            "title": "password",
            "description": "",
            "type": "string"
          },
          "is_active": {
            "title": "is_active",
            "description": "",
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "surname"
        ]
      },
      "AnnotationItemForm": {
        "type": "object",
        "title": "AnnotationItemForm",
        "properties": {
          "annotation_id": {
            "title": "annotation_id",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "title": "content",
            "description": "",
            "type": "string"
          },
          "page": {
            "title": "page",
            "description": "",
            "type": "integer"
          }
        },
        "required": [
          "annotation_id",
          "content",
          "page"
        ]
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "Basic HTTP authentication using username and password"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Bearer token authentication"
      }
    }
  },
  "security": [
    {
      "basicAuth": []
    },
    {
      "bearerAuth": []
    }
  ]
}
